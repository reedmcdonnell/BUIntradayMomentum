timeSeriesRegressVar[, c('Date', bestVars) := NULL]
rep
rep
?rep_along
?rep
#Only keep best Coefficients
timeSeriesRegressVar[, c('Date', bestVars) := rep(NULL, 1 + lenght(bestVars))]
#Only keep best Coefficients
timeSeriesRegressVar[, c('Date', bestVars) := rep(NULL, 1 + length(bestVars))]
#Load regression time series
load('../FinalData/master.Rda')
load('../FinalData/timeSeriesRegressVar.Rda')
load('../FinalData/timeSeriesRegressModel.Rda')
alphaToEnter <- .08
#############################################
#Remove variables below alpha-to-enter
bestVarsMap = hash()
tickers <- unique(master$Ticker)
for(ticker in tickers) {
bestVars <- getBestVars(master[Ticker == ticker], alphaToEnter)
bestVarsMap[[ticker]] <- bestVars
#tsRegVar <- tsRegVar[!(Ticker == ticker & !(variable %in% bestVars))]
}
bestVars <- Reduce(function(x, y) c(x[[1]], y), values(bestVarsMap))
#Only keep best Coefficients
timeSeriesRegressVar[, c('Date', bestVars) := rep(NULL, 1 + length(bestVars))]
#Only keep best Coefficients
timeSeriesRegressVar[, .SD := rep(NULL, 1 + length(bestVars)), .SDCols = c('Date', bestVars)]
load('../FinalData/master.Rda')
load('../FinalData/timeSeriesRegressVar.Rda')
load('../FinalData/timeSeriesRegressModel.Rda')
alphaToEnter <- .08
#############################################
#Remove variables below alpha-to-enter
bestVarsMap = hash()
tickers <- unique(master$Ticker)
for(ticker in tickers) {
bestVars <- getBestVars(master[Ticker == ticker], alphaToEnter)
bestVarsMap[[ticker]] <- bestVars
#tsRegVar <- tsRegVar[!(Ticker == ticker & !(variable %in% bestVars))]
}
bestVars <- Reduce(function(x, y) c(x[[1]], y), values(bestVarsMap))
#Only keep best Coefficients
timeSeriesRegressVar[, .SD := rep(NULL, 1 + length(bestVars)), .SDCols = c('Date', bestVars)]
bestVars
#Only keep best Coefficients
timeSeriesRegressVar[, .SD := NULL, .SDCols = c('Date', bestVars)]
#Only keep best Coefficients
timeSeriesRegressVar[, .SDCols := NULL, .SDCols = c('Date', bestVars)]
setdiff(names(timeSeriesRegressVar), bestVars)
setdiff(setdiff(retCols, 'R13'), bestVars)
setdiff(retCols, 'R13')
bestVars
setdiff(names(timeSeriesRegressVar), setdiff(retCols, 'R13'))
cols <- c(setdiff(names(timeSeriesRegressVar), setdiff(retCols, 'R13')), bestVars)
cols
timeSeriesRegressVar[, cols, with = FALSE]
timeSeriesRegressVar[, cols, with = FALSE]
#Clear Workspace
rm(list = ls())
#Source files
source('./libraries.R')
source('./functions.R')
#Load regression time series
load('../FinalData/master.Rda')
load('../FinalData/timeSeriesRegressVar.Rda')
load('../FinalData/timeSeriesRegressModel.Rda')
alphaToEnter <- .08
#############################################
#Remove variables below alpha-to-enter
bestVarsMap = hash()
tickers <- unique(master$Ticker)
for(ticker in tickers) {
bestVars <- getBestVars(master[Ticker == ticker], alphaToEnter)
bestVarsMap[[ticker]] <- bestVars
#tsRegVar <- tsRegVar[!(Ticker == ticker & !(variable %in% bestVars))]
}
bestVars <- Reduce(function(x, y) c(x[[1]], y), values(bestVarsMap))
#Only keep best Coefficients
cols <- c(setdiff(names(timeSeriesRegressVar), setdiff(retCols, 'R13')), bestVars)
timeSeriesRegressVar <- timeSeriesRegressVar[, cols, with = FALSE]
timeSeriesRegressVar <- timeSeriesRegressVar[, lapply(.SD, mean, na.rm=TRUE),
by=c('Date', 'Type', 'Lookback'),
.SDcols = setdiff(retCols, 'R13')]
timeSeriesRegressVar <- timeSeriesRegressVar[, lapply(.SD, mean, na.rm=TRUE),
by=c('Date', 'Type', 'Lookback'),
.SDcols = bestVars]
#Load regression time series
load('../FinalData/master.Rda')
load('../FinalData/timeSeriesRegressVar.Rda')
load('../FinalData/timeSeriesRegressModel.Rda')
alphaToEnter <- .08
#############################################
#Remove variables below alpha-to-enter
bestVarsMap = hash()
tickers <- unique(master$Ticker)
for(ticker in tickers) {
bestVars <- getBestVars(master[Ticker == ticker], alphaToEnter)
bestVarsMap[[ticker]] <- bestVars
#tsRegVar <- tsRegVar[!(Ticker == ticker & !(variable %in% bestVars))]
}
bestVars <- Reduce(function(x, y) c(x[[1]], y), values(bestVarsMap))
#Only keep best Coefficients
cols <- c(setdiff(names(timeSeriesRegressVar), setdiff(retCols, 'R13')), bestVars)
timeSeriesRegressVar <- timeSeriesRegressVar[, cols, with = FALSE]
timeSeriesRegressVar <- timeSeriesRegressVar[, lapply(.SD, mean, na.rm=TRUE),
by=c('Date', 'Type', 'Lookback'),
.SDcols = bestVars]
#Aggregate data by ticker
tsRegVar <- melt(timeSeriesRegressVar, id.vars = c('Date', 'Lookback', 'Type'),
measure.vars = bestVars) %>% data.table()
View(tsRegVar)
#Load regression time series
load('../FinalData/master.Rda')
load('../FinalData/timeSeriesRegressVar.Rda')
load('../FinalData/timeSeriesRegressModel.Rda')
alphaToEnter <- .08
#############################################
#Remove variables below alpha-to-enter
bestVarsMap = hash()
tickers <- unique(master$Ticker)
for(ticker in tickers) {
bestVars <- getBestVars(master[Ticker == ticker], alphaToEnter)
bestVarsMap[[ticker]] <- bestVars
#tsRegVar <- tsRegVar[!(Ticker == ticker & !(variable %in% bestVars))]
}
bestVars <- Reduce(function(x, y) c(x[[1]], y), values(bestVarsMap))
#Only keep best Coefficients
cols <- c(setdiff(names(timeSeriesRegressVar), setdiff(retCols, 'R13')), bestVars)
timeSeriesRegressVar <- timeSeriesRegressVar[, cols, with = FALSE]
timeSeriesRegressVar <- timeSeriesRegressVar[, lapply(.SD, mean, na.rm=TRUE),
by=c('Date', 'Type', 'Lookback'),
.SDcols = bestVars]
timeSeriesRegressVar
tickers <- unique(master$Ticker)
for(ticker in tickers) {
bestVars <- getBestVars(master[Ticker == ticker], alphaToEnter)
bestVarsMap[[ticker]] <- bestVars
#tsRegVar <- tsRegVar[!(Ticker == ticker & !(variable %in% bestVars))]
}
#Remove variables below alpha-to-enter
bestVarsMap = hash()
tickers <- unique(master$Ticker)
for(ticker in tickers) {
bestVars <- getBestVars(master[Ticker == ticker], alphaToEnter)
bestVarsMap[[ticker]] <- bestVars
#tsRegVar <- tsRegVar[!(Ticker == ticker & !(variable %in% bestVars))]
}
getBestVars(master[Ticker == 'FXI'], alphaToEnter)
#Source files
source('./libraries.R')
source('./functions.R')
getBestVars(master[Ticker == 'QQQ'], alphaToEnter)
bestVars
#Load regression time series
load('../FinalData/master.Rda')
load('../FinalData/timeSeriesRegressVar.Rda')
load('../FinalData/timeSeriesRegressModel.Rda')
alphaToEnter <- .08
#############################################
#Remove variables below alpha-to-enter
bestVarsMap = hash()
tickers <- unique(master$Ticker)
for(ticker in tickers) {
bestVars <- getBestVars(master[Ticker == ticker], alphaToEnter)
bestVarsMap[[ticker]] <- bestVars
#tsRegVar <- tsRegVar[!(Ticker == ticker & !(variable %in% bestVars))]
}
bestVars <- Reduce(function(x, y) c(x[[1]], y), values(bestVarsMap))
#Source files
source('./libraries.R')
source('./functions.R')
#Load regression time series
load('../FinalData/master.Rda')
load('../FinalData/timeSeriesRegressVar.Rda')
load('../FinalData/timeSeriesRegressModel.Rda')
alphaToEnter <- .08
#############################################
#Remove variables below alpha-to-enter
bestVarsMap = hash()
tickers <- unique(master$Ticker)
for(ticker in tickers) {
bestVars <- getBestVars(master[Ticker == ticker], alphaToEnter)
bestVarsMap[[ticker]] <- bestVars
#tsRegVar <- tsRegVar[!(Ticker == ticker & !(variable %in% bestVars))]
}
bestVars <- Reduce(function(x, y) c(x[[1]], y), values(bestVarsMap))
bestVars
#Only keep best Coefficients
cols <- c(setdiff(names(timeSeriesRegressVar), setdiff(retCols, 'R13')), bestVars)
cols
timeSeriesRegressVar <- timeSeriesRegressVar[, cols, with = FALSE]
timeSeriesRegressVar <- timeSeriesRegressVar[, lapply(.SD, mean, na.rm=TRUE),
by=c('Date', 'Type', 'Lookback'),
.SDcols = bestVars]
#Load regression time series
load('../FinalData/master.Rda')
load('../FinalData/timeSeriesRegressVar.Rda')
load('../FinalData/timeSeriesRegressModel.Rda')
alphaToEnter <- .08
#############################################
#Remove variables below alpha-to-enter
bestVarsMap = hash()
tickers <- unique(master$Ticker)
for(ticker in tickers) {
bestVars <- getBestVars(master[Ticker == ticker], alphaToEnter)
bestVarsMap[[ticker]] <- bestVars
#tsRegVar <- tsRegVar[!(Ticker == ticker & !(variable %in% bestVars))]
}
bestVars <- Reduce(function(x, y) c(x[[1]], y), values(bestVarsMap))
#Only keep best Coefficients
cols <- c(setdiff(names(timeSeriesRegressVar), setdiff(retCols, 'R13')), bestVars)
timeSeriesRegressVar <- timeSeriesRegressVar[, cols, with = FALSE]
#Load regression time series
load('../FinalData/master.Rda')
load('../FinalData/timeSeriesRegressVar.Rda')
load('../FinalData/timeSeriesRegressModel.Rda')
alphaToEnter <- .08
#############################################
#Remove variables below alpha-to-enter
bestVarsMap = hash()
tickers <- unique(master$Ticker)
for(ticker in tickers) {
bestVars <- getBestVars(master[Ticker == ticker], alphaToEnter)
bestVarsMap[[ticker]] <- bestVars
#tsRegVar <- tsRegVar[!(Ticker == ticker & !(variable %in% bestVars))]
}
bestVars <- Reduce(function(x, y) c(x[[1]], y), values(bestVarsMap))
#Only keep best Coefficients
cols <- c(setdiff(names(timeSeriesRegressVar), setdiff(retCols, 'R13')), bestVars)
timeSeriesRegressVar <- timeSeriesRegressVar[, cols, with = FALSE]
timeSeriesRegressVar
#Take mean by ticker
timeSeriesRegressVar <- timeSeriesRegressVar[, lapply(.SD, mean, na.rm=TRUE),
by=c('Date', 'Type', 'Lookback'),
.SDcols = bestVars]
#Aggregate data by ticker
tsRegVar <- melt(timeSeriesRegressVar, id.vars = c('Date', 'Lookback', 'Type'),
measure.vars = bestVars) %>% data.table()
tsRegVar
unique(tsRegVar$variable)
#Load regression time series
load('../FinalData/master.Rda')
load('../FinalData/timeSeriesRegressVar.Rda')
load('../FinalData/timeSeriesRegressModel.Rda')
alphaToEnter <- .08
#############################################
#Remove variables below alpha-to-enter
bestVarsMap = hash()
tickers <- unique(master$Ticker)
for(ticker in tickers) {
bestVars <- getBestVars(master[Ticker == ticker], alphaToEnter)
bestVarsMap[[ticker]] <- bestVars
#tsRegVar <- tsRegVar[!(Ticker == ticker & !(variable %in% bestVars))]
}
bestVars <- Reduce(function(x, y) c(x[[1]], y), values(bestVarsMap))
#Only keep best Coefficients
cols <- c(setdiff(names(timeSeriesRegressVar), setdiff(retCols, 'R13')), bestVars)
timeSeriesRegressVar <- timeSeriesRegressVar[, cols, with = FALSE]
#Take mean by ticker
timeSeriesRegressVar <- timeSeriesRegressVar[, lapply(.SD, mean, na.rm=TRUE),
by=c('Date', 'Type', 'Lookback'),
.SDcols = bestVars]
View(timeSeriesRegressVar)
cols
#Only keep best Coefficients
cols <- c(setdiff(names(timeSeriesRegressVar), setdiff(retCols, 'R13')), bestVars)
cols
bestVars
#Remove variables below alpha-to-enter
bestVarsMap = hash()
tickers <- unique(master$Ticker)
for(ticker in tickers) {
bestVars <- getBestVars(master[Ticker == ticker], alphaToEnter)
bestVarsMap[[ticker]] <- bestVars
#tsRegVar <- tsRegVar[!(Ticker == ticker & !(variable %in% bestVars))]
}
bestVarsMap
Reduce(function(x, y) c(x[[1]], y), values(bestVarsMap))
Reduce(function(x, y) c(x, y), values(bestVarsMap))
bestVars <- unique(Reduce(function(x, y) c(x, y), values(bestVarsMap)))
bestVars
#Only keep best Coefficients
cols <- c(setdiff(names(timeSeriesRegressVar), setdiff(retCols, 'R13')), bestVars)
cols
bestVars
bestVars[order(bestVars)]
#Only keep best Coefficients
cols <- c(setdiff(names(timeSeriesRegressVar), setdiff(retCols, 'R13')), bestVars)
cols
#Load regression time series
load('../FinalData/master.Rda')
load('../FinalData/timeSeriesRegressVar.Rda')
load('../FinalData/timeSeriesRegressModel.Rda')
alphaToEnter <- .08
#############################################
#Remove variables below alpha-to-enter
bestVarsMap = hash()
tickers <- unique(master$Ticker)
for(ticker in tickers) {
bestVars <- getBestVars(master[Ticker == ticker], alphaToEnter)
bestVarsMap[[ticker]] <- bestVars
#tsRegVar <- tsRegVar[!(Ticker == ticker & !(variable %in% bestVars))]
}
bestVars <- unique(Reduce(function(x, y) c(x, y), values(bestVarsMap)))
#Only keep best Coefficients
cols <- c(setdiff(names(timeSeriesRegressVar), setdiff(retCols, 'R13')), bestVars)
timeSeriesRegressVar <- timeSeriesRegressVar[, cols, with = FALSE]
#Take mean by ticker
timeSeriesRegressVar <- timeSeriesRegressVar[, lapply(.SD, mean, na.rm=TRUE),
by=c('Date', 'Type', 'Lookback'),
.SDcols = bestVars]
#Aggregate data by ticker
tsRegVar <- melt(timeSeriesRegressVar, id.vars = c('Date', 'Lookback', 'Type'),
measure.vars = bestVars) %>% data.table()
tsRegVar
unique(tsRegVar$variable)
timeSeriesRegressModel <- timeSeriesRegressModel[Ticker %in% bestVars]
plot <- ggplot(data = tsRegVar[Type == 'Coeff' & Lookback == TRUE],
aes(x = Date, y = value, group = variable, color = variable)) + geom_line() +
xlab('Dates') + ylab('Coefficient') + ggtitle('Regression Coefficients')
plot(plot)
#Load regression time series
load('../FinalData/master.Rda')
load('../FinalData/timeSeriesRegressVar.Rda')
load('../FinalData/timeSeriesRegressModel.Rda')
alphaToEnter <- .08
#############################################
#Remove variables below alpha-to-enter
bestVarsMap = hash()
tickers <- unique(master$Ticker)
for(ticker in tickers) {
bestVars <- getBestVars(master[Ticker == ticker], alphaToEnter)
bestVarsMap[[ticker]] <- bestVars
#tsRegVar <- tsRegVar[!(Ticker == ticker & !(variable %in% bestVars))]
}
bestVars <- unique(Reduce(function(x, y) c(x, y), values(bestVarsMap)))
#Only keep best Coefficients
cols <- c(setdiff(names(timeSeriesRegressVar), setdiff(retCols, 'R13')), bestVars)
timeSeriesRegressVar <- timeSeriesRegressVar[, cols, with = FALSE]
#Take mean by ticker
timeSeriesRegressVar <- timeSeriesRegressVar[, lapply(.SD, mean, na.rm=TRUE),
by=c('Date', 'Type', 'Lookback'),
.SDcols = bestVars]
#Aggregate data by ticker
tsRegVar <- melt(timeSeriesRegressVar, id.vars = c('Date', 'Lookback', 'Type'),
measure.vars = bestVars) %>% data.table()
#Model stats
timeSeriesRegressModel <- timeSeriesRegressModel[, lapply(.SD, mean, na.rm=TRUE),
by=c('Date', 'Lookback'),
.SDcols = c('AdjRSquared', 'ResidualStdErr', 'FStatPVal')]
timeSeriesRegressModel <- timeSeriesRegressModel[Ticker %in% bestVars]
timeSeriesRegressModel
#Take mean by ticker
timeSeriesRegressVar <- timeSeriesRegressVar[, lapply(.SD, mean, na.rm=TRUE),
by=c('Date', 'Type', 'Lookback'),
.SDcols = bestVars]
timeSeriesRegressVar
timeSeriesRegressModel
load('../FinalData/timeSeriesRegressModel.Rda')
timeSeriesRegressModel
load('../FinalData/timeSeriesRegressModel.Rda')
timeSeriesRegressModel
#Model stats
timeSeriesRegressModel <- timeSeriesRegressModel[, lapply(.SD, mean, na.rm=TRUE),
by=c('Date', 'Lookback'),
.SDcols = c('AdjRSquared', 'ResidualStdErr', 'FStatPVal')]
timeSeriesRegressModel
tsRegModel <- melt(timeSeriesRegressModel, id.vars = c('Date', 'Lookback'),
measure.vars = bestVars) %>% data.table()
#Load regression time series
load('../FinalData/master.Rda')
load('../FinalData/timeSeriesRegressVar.Rda')
load('../FinalData/timeSeriesRegressModel.Rda')
alphaToEnter <- .08
#############################################
#Remove variables below alpha-to-enter
bestVarsMap = hash()
tickers <- unique(master$Ticker)
for(ticker in tickers) {
bestVars <- getBestVars(master[Ticker == ticker], alphaToEnter)
bestVarsMap[[ticker]] <- bestVars
}
bestVars <- unique(Reduce(function(x, y) c(x, y), values(bestVarsMap)))
#Only keep best Coefficients
cols <- c(setdiff(names(timeSeriesRegressVar), setdiff(retCols, 'R13')), bestVars)
timeSeriesRegressVar <- timeSeriesRegressVar[, cols, with = FALSE]
#Take mean by ticker
timeSeriesRegressVar <- timeSeriesRegressVar[, lapply(.SD, mean, na.rm=TRUE),
by=c('Date', 'Type', 'Lookback'),
.SDcols = bestVars]
#Aggregate data by ticker
tsRegVar <- melt(timeSeriesRegressVar, id.vars = c('Date', 'Lookback', 'Type'),
measure.vars = bestVars) %>% data.table()
#Model stats
timeSeriesRegressModel <- timeSeriesRegressModel[, lapply(.SD, mean, na.rm=TRUE),
by=c('Date', 'Lookback'),
.SDcols = c('AdjRSquared', 'ResidualStdErr', 'FStatPVal')]
melt(timeSeriesRegressModel, id.vars = c('Date', 'Lookback'),
measure.vars = bestVars) %>% data.table()
str(timeSeriesRegressModel)
tsRegModel <- melt(timeSeriesRegressModel, id.vars = c('Date', 'Lookback'),
measure.vars = c('AdjRSquared', 'ResidualStdErr', 'FStatPVal')) %>% data.table()
plot <- ggplot(data = tsRegVar[Lookback == TRUE],
aes(x = Date, y = AdjRSquared, group = variable, color = variable)) + geom_line() +
xlab('Dates') + ylab('R^2') + ggtitle('Adjusted R^2')
plot(plot)
#Adjusted R^2
plot <- ggplot(data = tsRegModel[Lookback == TRUE],
aes(x = Date, y = AdjRSquared, group = variable, color = variable)) + geom_line() +
xlab('Dates') + ylab('R^2') + ggtitle('Adjusted R^2')
plot(plot)
plot <- ggplot(data = timeSeriesRegressModel[Lookback == TRUE],
aes(x = Date, y = AdjRSquared, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab('R^2') + ggtitle('Adjusted R^2')
plot(plot)
modelCols <- c('AdjRSquared', 'ResidualStdErr', 'FStatPVal')
modelCols <- c('AdjRSquared', 'ResidualStdErr', 'FStatPVal')
for(col in modelCols) {
plot <- ggplot(data = timeSeriesRegressModel[Lookback == FALSE],
aes(x = Date, y = col, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab(col) + ggtitle(col)
plot(plot)
plot <- ggplot(data = timeSeriesRegressModel[Lookback == TRUE],
aes(x = Date, y = col, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab(col) + ggtitle(col)
plot(plot)
}
#Adjusted R^2
plot <- ggplot(data = timeSeriesRegressModel[Lookback == FALSE],
aes(x = Date, y = AdjRSquared, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab('R^2') + ggtitle('Adjusted R^2')
plot(plot)
#Adjusted R^2
plot <- ggplot(data = timeSeriesRegressModel[Lookback == TRUE],
aes(x = Date, y = AdjRSquared, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab('R^2') + ggtitle('Adjusted R^2')
plot(plot)
#Adjusted R^2
plot <- ggplot(data = timeSeriesRegressModel[Lookback == TRUE],
aes(x = Date, y = AdjRSquared, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab('R^2') + ggtitle('Adjusted R^2 - Rolling 3 Years')
plot(plot)
plot <- ggplot(data = timeSeriesRegressModel[Lookback == FALSE],
aes(x = Date, y = AdjRSquared, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab('R^2') + ggtitle('Adjusted R^2 - Complete')
plot(plot)
#ResidualStdErr
plot <- ggplot(data = timeSeriesRegressModel[Lookback == TRUE],
aes(x = Date, y = ResidualStdErr, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab('Error') + ggtitle('Residual Standard Error - Rolling 3 Years')
plot(plot)
plot <- ggplot(data = timeSeriesRegressModel[Lookback == FALSE],
aes(x = Date, y = ResidualStdErr, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab('Error') + ggtitle('Residual Standard Error - Complete')
plot(plot)
#FStatPVal
plot <- ggplot(data = timeSeriesRegressModel[Lookback == TRUE],
aes(x = Date, y = FStatPVal, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab('P-Value') + ggtitle('F-Statistic P-Value - Rolling 3 Years')
plot(plot)
plot <- ggplot(data = timeSeriesRegressModel[Lookback == FALSE],
aes(x = Date, y = FStatPVal, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab('P-Value') + ggtitle('F-Statistic P-Value - Complete')
plot(plot)
#Adjusted R^2
plot <- ggplot(data = timeSeriesRegressModel[Lookback == TRUE],
aes(x = Date, y = AdjRSquared, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab('R^2') + ggtitle('Adjusted R^2 - Rolling 3 Years')
plot(plot)
plot <- ggplot(data = timeSeriesRegressModel[Lookback == FALSE],
aes(x = Date, y = AdjRSquared, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab('R^2') + ggtitle('Adjusted R^2 - Complete')
plot(plot)
#ResidualStdErr
plot <- ggplot(data = timeSeriesRegressModel[Lookback == TRUE],
aes(x = Date, y = ResidualStdErr, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab('Error') + ggtitle('Residual Standard Error - Rolling 3 Years')
plot(plot)
plot <- ggplot(data = timeSeriesRegressModel[Lookback == FALSE],
aes(x = Date, y = ResidualStdErr, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab('Error') + ggtitle('Residual Standard Error - Complete')
plot(plot)
#FStatPVal
plot <- ggplot(data = timeSeriesRegressModel[Lookback == TRUE],
aes(x = Date, y = FStatPVal, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab('P-Value') + ggtitle('F-Statistic P-Value - Rolling 3 Years')
plot(plot)
plot <- ggplot(data = timeSeriesRegressModel[Lookback == FALSE],
aes(x = Date, y = FStatPVal, color = AdjRSquared)) + geom_line() +
xlab('Dates') + ylab('P-Value') + ggtitle('F-Statistic P-Value - Complete')
plot(plot)
#Coefficients
plot <- ggplot(data = tsRegVar[Type == 'Coeff' & Lookback == FALSE],
aes(x = Date, y = value, group = variable, color = variable)) + geom_line() +
xlab('Dates') + ylab('Coefficient') + ggtitle('Average Regression Coefficients')
plot(plot)
#P-Vals
plot <- ggplot(data = tsRegVar[Type == 'PVal' & Lookback == FALSE],
aes(x = Date, y = value, group = variable, color = variable)) + geom_line() +
xlab('Dates') + ylab('P-Value') + ggtitle('Average P-Value')
plot(plot)
#Coefficients
plot <- ggplot(data = tsRegVar[Type == 'Coeff' & Lookback == TRUE],
aes(x = Date, y = value, group = variable, color = variable)) + geom_line() +
xlab('Dates') + ylab('Coefficient') + ggtitle('Average Regression Coefficients')
plot(plot)
#P-Vals
plot <- ggplot(data = tsRegVar[Type == 'PVal' & Lookback == TRUE],
aes(x = Date, y = value, group = variable, color = variable)) + geom_line() +
xlab('Dates') + ylab('P-Value') + ggtitle('Average P-Value')
plot(plot)
