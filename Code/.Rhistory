}
#Clear Workspace
rm(list = ls())
#Packages
library(data.table)
library(lubridate)
library(dplyr)
library(ggplot2)
library(moments)
#Functions
histogram <- function(x, title, varTitle) {
std <- sd(x)
avg <- mean(x)
qplot(dateData$R3,
geom="histogram",
binwidth=.001,
xlim=c(avg - 3 * std, avg + 3 * std),
main=title,
xlab=varTitle,
fill=I("blue"),
col=I("red"),
alpha=I(.2)) + annotate("text", label = paste0('Mean: ', signif(avg, 4), ', Std: ', signif(std, 4), '\n',
'Kurt: ', signif(kurtosis(x), 4), ' Skew: ', signif(skewness(x), 4)),
x = avg - 2 * std, y = 600, size = 4, colour = "red")
}
#Clear Workspace
rm(list = ls())
#Packages
library(data.table)
library(lubridate)
library(dplyr)
library(ggplot2)
library(moments)
#Functions
histogram <- function(x, title, varTitle) {
std <- sd(x)
avg <- mean(x)
qplot(dateData$R3,
geom="histogram",
binwidth=.001,
xlim=c(avg - 3 * std, avg + 3 * std),
main=title,
xlab=varTitle,
fill=I("blue"),
col=I("red"),
alpha=I(.2)) + annotate("text", label = paste0('Mean: ', signif(avg, 4), ', Std: ', signif(std, 4), '\n',
'Kurt: ', signif(kurtosis(x), 4), ' Skew: ', signif(skewness(x), 4)),
x = avg - 2 * std, y = 600, size = 4, colour = "red")
}
#Load minute data for SPY
load(paste0('../ConsolidatedData/', 'minuteData.Rda'))
#Fix timezone issue
attr(minuteData$Date, "tzone") <- "EST5EDT"
minuteData[, Date := Date - 60 * 60] #<- minuteData$Date - 60*60 #subratct hour
#Calculate returns for every minute
minuteData$Ret <- minuteData$Price / shift(minuteData$Price) - 1
#Move returns backward so Ret for 9:30 -> Price @ 9:31 / Price @ 9:30 - 1
minuteData$Ret <- shift(minuteData$Ret, -1)
#Aggregate minute data by date and get P1 (10:00 price), P2 (15:00 price), and P3 (15:30 price)
dateData <- minuteData[, .(Open = first(Price), Close = last(Price),
P1 = Price[hour(Date) == 10 & minute(Date) == 0],
Vol1 = sd(Ret[hour(Date) < 10]),
P2 = Price[hour(Date) == 15 & minute(Date) == 0],
Vol2 = sd(Ret[hour(Date) == 15 & minute(Date) < 30]),
P3 = Price[hour(Date) == 15 & minute(Date) == 30],
Vol3 = sd(Ret[hour(Date) == 15 & minute(Date) >= 30 ]),
Size1 = sum(Size[hour(Date) < 15 |
(hour(Date) = 15 & minute(Date) < 30)]),
Size = sum(Size),
Vol4 = sd(Ret[hour(Date) < 15 |
(hour(Date) == 15 & minute(Date) < 30)]),
Vol = sd(Ret)),
by = cut(Date, "1 day")]
#Reset date column (cut resets formatting to factor?)
names(dateData)[1] <- 'Date'
dateData$Date <- as.Date(dateData$Date)
#Sort data and remove NAs
dateData <- dateData[order(Date)]
dateData <- na.omit(dateData)
#Volatility group based on first 30 minutes return volatility
dateData[, VolGroup := ifelse(Vol1 < median(Vol1), 1, 2)]
#30 minute returns R1 (first half hour), R2 (2nd to last half hour), R3 (last half hour)
dateData[, R1 := P1 / shift(Close) - 1]
dateData[, R2 := P3 / P2 - 1]
dateData[, R3 := Close / P3 - 1]
dateData[, R4 := P3 / shift(Close) - 1]
#Compute Z-Score for Size variable
dateData[, Size1 := (Size1 - mean(Size1)) / sd(Size1)]
dateData[, Size := (Size - mean(Size)) / sd(Size)]
#Remove NAs
dateData <- na.omit(dateData)
#Clear Workspace
rm(list = ls())
#Packages
library(data.table)
library(lubridate)
library(dplyr)
library(ggplot2)
library(moments)
#Functions
histogram <- function(x, title, varTitle) {
std <- sd(x)
avg <- mean(x)
qplot(dateData$R3,
geom="histogram",
binwidth=.001,
xlim=c(avg - 3 * std, avg + 3 * std),
main=title,
xlab=varTitle,
fill=I("blue"),
col=I("red"),
alpha=I(.2)) + annotate("text", label = paste0('Mean: ', signif(avg, 4), ', Std: ', signif(std, 4), '\n',
'Kurt: ', signif(kurtosis(x), 4), ' Skew: ', signif(skewness(x), 4)),
x = avg - 2 * std, y = 600, size = 4, colour = "red")
}
#Load minute data for SPY
load(paste0('../ConsolidatedData/', 'minuteData.Rda'))
#Fix timezone issue
attr(minuteData$Date, "tzone") <- "EST5EDT"
minuteData[, Date := Date - 60 * 60] #<- minuteData$Date - 60*60 #subratct hour
#Calculate returns for every minute
minuteData$Ret <- minuteData$Price / shift(minuteData$Price) - 1
#Move returns backward so Ret for 9:30 -> Price @ 9:31 / Price @ 9:30 - 1
minuteData$Ret <- shift(minuteData$Ret, -1)
#Aggregate minute data by date and get P1 (10:00 price), P2 (15:00 price), and P3 (15:30 price)
dateData <- minuteData[, .(Open = first(Price), Close = last(Price),
P1 = Price[hour(Date) == 10 & minute(Date) == 0],
Vol1 = sd(Ret[hour(Date) < 10]),
P2 = Price[hour(Date) == 15 & minute(Date) == 0],
Vol2 = sd(Ret[hour(Date) == 15 & minute(Date) < 30]),
P3 = Price[hour(Date) == 15 & minute(Date) == 30],
Vol3 = sd(Ret[hour(Date) == 15 & minute(Date) >= 30 ]),
Size1 = sum(Size[hour(Date) < 15 |
(hour(Date) = 15 & minute(Date) < 30)]),
Size = sum(Size),
Vol4 = sd(Ret[hour(Date) < 15 |
(hour(Date) == 15 & minute(Date) < 30)]),
Vol = sd(Ret)),
by = cut(Date, "1 day")]
#Reset date column (cut resets formatting to factor?)
names(dateData)[1] <- 'Date'
dateData$Date <- as.Date(dateData$Date)
#Sort data and remove NAs
dateData <- dateData[order(Date)]
dateData <- na.omit(dateData)
#Volatility group based on first 30 minutes return volatility
dateData[, VolGroup := ifelse(Vol1 < median(Vol1), 1, 2)]
#30 minute returns R1 (first half hour), R2 (2nd to last half hour), R3 (last half hour)
dateData[, R1 := P1 / shift(Close) - 1]
dateData[, R2 := P3 / P2 - 1]
dateData[, R3 := Close / P3 - 1]
dateData[, R := P3 / shift(Close) - 1]
#Compute Z-Score for Size variable
dateData[, Size1 := (Size1 - mean(Size1)) / sd(Size1)]
dateData[, Size := (Size - mean(Size)) / sd(Size)]
#Remove NAs
dateData <- na.omit(dateData)
histogram(dateData$R1, 'First 30-Minute Returns', 'R1')
histogram(dateData$R3, 'Last 30-Minute Returns', 'R3')
histogram(dateData$Vol, 'Daily Volatility', 'Vol')
histogram(dateData$R1, 'First 30-Minute Returns', 'R1')
histogram(dateData$R3, 'Last 30-Minute Returns', 'R3')
histogram(dateData$Vol, 'Daily Volatility', 'Vol')
#Normal Regression
#R3 ~ R1
mod1 <- lm(R3 ~ R1, data=dateData)
summary(mod1)
#Two variables
#R3 ~ R1 + R2
mod2 <- lm(R3 ~ R1 + R2, data=dateData)
summary(mod2)
#Many variables
#R3 ~ R1 + R2 + R1*Vol1
mod3 <- lm(R3 ~ R1 + R2 + R1*Vol4, data=dateData)
summary(mod3)
#Save regression coefficients for prediction (1 variable model)
B0 <- coef(mod1)[[1]]
B1 <- coef(mod1)[[2]]
#Compute Daily Retruns and Cummulative Returns for Strategies
#Long SPY
dateData$SPYRet <- (dateData$Close / shift(dateData$Close)) - 1
dateData <- na.omit(dateData)
dateData$SPYCumRet <- cumprod(1 + dateData$SPYRet)
#Long/Hold
dateData[, Strat1Ret := ifelse(B0 + B1 * R1 > 0, R3, -R3)]
dateData$Strat1CumRet <- cumprod(1 + dateData$Strat1Ret)
#Long Only
dateData[, Strat2Ret := ifelse(B0 + B1 * R1 > 0, R3, 0)]
dateData$Strat2CumRet <- cumprod(1 + dateData$Strat2Ret)
#Short only
dateData[, Strat3Ret := ifelse(B0 + B1 * R1 > 0, 0, -R3)]
dateData$Strat3CumRet <- cumprod(1 + dateData$Strat3Ret)
#Plot strategies
plot <- ggplot() +
geom_line(data = dateData, aes(x = Date, y = SPYCumRet, colour = 'SPY Long')) +
geom_line(data = dateData, aes(x = Date, y = Strat1CumRet, colour = 'Long/Short Strategy')) +
geom_line(data = dateData, aes(x = Date, y = Strat2CumRet, colour = 'Long Strategy')) +
geom_line(data = dateData, aes(x = Date, y = Strat3CumRet, colour = 'Short Strategy')) +
#geom_line(data = dateData, aes(x = Date, y = NaiveCumRet, colour = 'Naive Strategy')) +
xlab('Dates') + ylab('Return') + ggtitle('Strategy Return')
plot(plot)
histogram(dateData$Strat1Ret, 'Long/Short Strategy Daily Returns', 'Strat1Ret')
histogram(dateData$Strat1Ret - dateData$SPYRet, 'Long/Short Strategy - SPY Daily Returns', 'Returns')
temp <- dateData
temp <- dateData[Strat1Ret %between% c(mean(Strat1Ret) - 2*sd(Strat1Ret), mean(Strat1Ret) + 2*sd(Strat1Ret))]
temp$Strat1CumRet <- cumprod(1 + temp$Strat1Ret)
plot <- ggplot() +
geom_line(data = temp, aes(x = Date, y = SPYCumRet, colour = 'SPY Long')) +
geom_line(data = temp, aes(x = Date, y = Strat1CumRet, colour = 'Long/Short Strategy'))
plot(plot)
#Clear Workspace
rm(list = ls())
#Packages
library(data.table)
library(lubridate)
library(dplyr)
library(ggplot2)
library(moments)
library(psych)
#Functions
histogram <- function(x, title, varTitle) {
std <- sd(x)
avg <- mean(x)
qplot(dateData$R3,
geom="histogram",
binwidth=.001,
xlim=c(avg - 3 * std, avg + 3 * std),
main=title,
xlab=varTitle,
fill=I("blue"),
col=I("red"),
alpha=I(.2)) + annotate("text", label = paste0('Mean: ', signif(avg, 4), ', Std: ', signif(std, 4), '\n',
'Kurt: ', signif(kurtosis(x), 4), ' Skew: ', signif(skewness(x), 4)),
x = avg - 2 * std, y = 600, size = 4, colour = "red")
}
#Aggregate minute data by 30 minutes
dateData <- minuteData[, .(Ret = last(price) / first(Price) - 1),
by = cut(Date, "30 min")]
#Clear Workspace
rm(list = ls())
#Packages
library(data.table)
library(lubridate)
library(dplyr)
library(ggplot2)
library(moments)
library(psych)
#Functions
histogram <- function(x, title, varTitle) {
std <- sd(x)
avg <- mean(x)
qplot(dateData$R3,
geom="histogram",
binwidth=.001,
xlim=c(avg - 3 * std, avg + 3 * std),
main=title,
xlab=varTitle,
fill=I("blue"),
col=I("red"),
alpha=I(.2)) + annotate("text", label = paste0('Mean: ', signif(avg, 4), ', Std: ', signif(std, 4), '\n',
'Kurt: ', signif(kurtosis(x), 4), ' Skew: ', signif(skewness(x), 4)),
x = avg - 2 * std, y = 600, size = 4, colour = "red")
}
#Load minute data for SPY
load(paste0('../ConsolidatedData/', 'minuteData.Rda'))
#Fix timezone issue
attr(minuteData$Date, "tzone") <- "EST5EDT"
minuteData[, Date := Date - 60 * 60] #<- minuteData$Date - 60*60 #subratct hour
#Calculate returns for every minute
minuteData$Ret <- minuteData$Price / shift(minuteData$Price) - 1
#Move returns backward so Ret for 9:30 -> Price @ 9:31 / Price @ 9:30 - 1
minuteData$Ret <- shift(minuteData$Ret, -1)
#Aggregate minute data by 30 minutes
dateData <- minuteData[, .(Ret = last(price) / first(Price) - 1),
by = cut(Date, "30 min")]
#Aggregate minute data by 30 minutes
dateData <- minuteData[, .(Ret = last(Price) / first(Price) - 1),
by = cut(Date, "30 min")]
#Aggregate minute data by 30 minutes
dateData <- minuteData[, .(Ret = last(Price) / first(Price) - 1),
by = cut(Date, "30 min")]
#Reset date column (cut resets formatting to factor?)
names(dateData)[1] <- 'Date'
dateData$Date <- as.Date(dateData$Date)
View(dateData)
load(paste0('../ConsolidatedData/', 'minuteData.Rda'))
#Fix timezone issue
attr(minuteData$Date, "tzone") <- "EST5EDT"
minuteData[, Date := Date - 60 * 60] #<- minuteData$Date - 60*60 #subratct hour
#Calculate returns for every minute
minuteData$Ret <- minuteData$Price / shift(minuteData$Price) - 1
#Move returns backward so Ret for 9:30 -> Price @ 9:31 / Price @ 9:30 - 1
minuteData$Ret <- shift(minuteData$Ret, -1)
#Aggregate minute data by 30 minutes
dateData <- minuteData[, .(Ret = last(Price) / first(Price) - 1),
by = cut(Date, "30 min")]
View(dateData)
View(dateData)
for(i in 10:16) {
print(i)
}
get30MinRets <- function(x) {
for(h in 10:16) {
Rets <- c(Rets, x[hour(Date) == h & minute(Date) == 0, .(Price)] / x[hour(Date) == (h-1) & minute(Date) == 30, .(Price)])
Rets <- c(Rets, x[hour(Date) == h & minute(Date) == 30, .(Price)] / x[hour(Date) == (h) & minute(Date) == 0, .(Price)])
}
return(Rets)
}
minuteData[as.Date(Date) == '2012-01-02']
minuteData[as.Date(Date) == '2012-01-03']
x <- minuteData[as.Date(Date) == '2012-01-03']
Rets <- c()
for(h in 10:16) {
Rets <- c(Rets, x[hour(Date) == h & minute(Date) == 0, .(Price)] / x[hour(Date) == (h-1) & minute(Date) == 30, .(Price)])
Rets <- c(Rets, x[hour(Date) == h & minute(Date) == 30, .(Price)] / x[hour(Date) == (h) & minute(Date) == 0, .(Price)])
}
x[hour(Date) == h & minute(Date) == 0, .(Price)]
x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
x[hour(Date) == h & minute(Date) == 0, .(Price)][1]
x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
x[hour(Date) == h & minute(Date) == 0, .(Price)]
x[hour(Date) == h & minute(Date) == -1, .(Price)]
x[hour(Date) == h & minute(Date) == -1, .(Price)][[1]]
is.na(x[hour(Date) == h & minute(Date) == -1, .(Price)][[1]])
length(x[hour(Date) == h & minute(Date) == -1, .(Price)][[1]])
x <- minuteData[as.Date(Date) == '2012-01-03']
Rets <- c()
for(h in 10:16) {
v1 <- x[hour(Date) == (h-1) & minute(Date) == 30, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
if(length(v1) + length(v2) + length(v3) != 3) {
return(NA)
}
Rets <- c(Rets, v2 / v1 - 1, v3 / v2 -1)
h <- 10
Rets <- c()
for(h in 10:16) {
v1 <- x[hour(Date) == (h-1) & minute(Date) == 30, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
if(length(v1) + length(v2) + length(v3) != 3) {
return(NA)
}
Rets <- c(Rets, v2 / v1 - 1, v3 / v2 -1)
}
Rets
x[hour(Date) == 16 & minute(Date) == 0, .(Price)]
close <- x[hour(Date) == 16 & minute(Date) == 0, .(Price)][[1]]
close
close <- x[hour(Date) == 16 & minute(Date) == 5, .(Price)][[1]]
close <- x[hour(Date) == 16 & minute(Date) == 5, .(Price)][[1]]
close
length(close)
any(!is.na([hour(Date) == 16 & minute(Date) == 5, .(Price)]))
any(!is.na(x[hour(Date) == 16 & minute(Date) == 5, .(Price)]))
any(!is.na(x[hour(Date) == 16 & minute(Date) == 0, .(Price)]))
any(!is.na(x[hour(Date) == 15 & minute(Date) == 0, .(Price)]))
any(!is.na(x[hour(Date) == 15 & minute(Date) == 0, .(Price)][[1]]))
any(!is.na(x[hour(Date) == 15 & minute(Date) == 5, .(Price)][[1]]))
any(!is.na(x[hour(Date) == 16 & minute(Date) == 5, .(Price)][[1]]))
v1 <- x[hour(Date) == (h-1) & minute(Date) == -1, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v1
v2
v2 / v1 - 1
Rets <- c()
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
Rets <- c(Rets, v2 / v1 - 1, v3 / v2 -1)
Rets
v3 / v2 -1
v1 <- x[hour(Date) == (h-1) & minute(Date) == -1, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
h
h <- 10
v1 <- x[hour(Date) == (h-1) & minute(Date) == -1, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
Rets <- c()
Rets <- c(Rets, v2 / v1 - 1, v3 / v2 -1)
Rets
v2 / v1 - 1
v3 / v2 -1
Rets <- c(Rets, v2 / v1 - 1, v3 / v2 -1)
rETS
Rets
v1 <- x[hour(Date) == (h-1) & minute(Date) == -1, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
v1
v2
v3
any(is.na(c(v1, v2)))
v1 <- x[hour(Date) == (h-1) & minute(Date) == 0, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
any(is.na(c(v1, v2)))
v1 <- x[hour(Date) == (h-1) & minute(Date) == 0, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
any(is.na(c(v1, v2)))
any(is.na(c(v1, v2, V3)))
any(is.na(c(v1, v2, V3)))
any(is.na(c(v1, v2, v3)))
v1 <- x[hour(Date) == (h-1) & minute(Date) == 0, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
any(is.na(c(v1, v2, v3)))
v1 <- x[hour(Date) == (h-1) & minute(Date) == 0, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
any(is.na(c(v1, v2, v3)))
v1
v2
v3
h <- 12
v1 <- x[hour(Date) == (h-1) & minute(Date) == 0, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
any(is.na(c(v1, v2, v3)))
v1
v2
v3
v1 <- x[hour(Date) == (h-1) & minute(Date) == -1, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
any(is.na(c(v1, v2, v3)))
any(!is.na(c(v1, v2, v3)))
v1 <- x[hour(Date) == (h-1) & minute(Date) == -1, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
any(!is.na(c(v1, v2, v3)))
v1 <- x[hour(Date) == (h-1) & minute(Date) == 0, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
any(!is.na(c(v1, v2, v3)))
v1 <- x[hour(Date) == (h-1) & minute(Date) == 0, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
any(!is.na(c(v1, v2, v3)))
v1
v2
v3
v1 <- x[hour(Date) == (h-1) & minute(Date) == -1, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
any(!is.na(c(v1, v2, v3)))
any(!is.na(c(v1, v2, v3)))
v1
v2
v3
any(!is.na(c(v1, v2, v3)))
any(!is.na(c(v2, v3)))
length(v1)
length(v2)
length(v1 + v2 + v3)
v1 <- x[hour(Date) == (h-1) & minute(Date) == -1, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
v1
v2
v3
length(v1 + v2 + v3)
v1 <- x[hour(Date) == (h-1) & minute(Date) == 0, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
length(v1 + v2 + v3)
v1 <- x[hour(Date) == (h-1) & minute(Date) == -1, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == -1, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == -1, .(Price)][[1]]
length(v1 + v2 + v3)
v1 <- x[hour(Date) == (h-1) & minute(Date) == -1, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
length(v1 + v2 + v3)
v1 <- x[hour(Date) == (h-1) & minute(Date) == 0, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
length(v1 + v2 + v3)
Rets <- c()
for(h in 10:15) {
v1 <- x[hour(Date) == (h-1) & minute(Date) == 30, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
if(length(v1 + v2 + v3) == 0) {
return(NA)
}
Rets <- c(Rets, v2 / v1 - 1, v3 / v2 -1)
}
close <- x[hour(Date) == 16 & minute(Date) == 0, .(Price)][[1]]
if(length(close + v3) == 0) {
return(NA)
}
Rets <- c(Rets, close / v3 - 1)
x <- minuteData[as.Date(Date) == '2012-01-03']
Rets <- c()
for(h in 10:15) {
v1 <- x[hour(Date) == (h-1) & minute(Date) == 30, .(Price)][[1]]
v2 <- x[hour(Date) == h & minute(Date) == 0, .(Price)][[1]]
v3 <- x[hour(Date) == h & minute(Date) == 30, .(Price)][[1]]
if(length(v1 + v2 + v3) == 0) {
return(NA)
}
Rets <- c(Rets, v2 / v1 - 1, v3 / v2 -1)
}
close <- x[hour(Date) == 16 & minute(Date) == 0, .(Price)][[1]]
if(length(close + v3) == 0) {
return(NA)
}
Rets <- c(Rets, close / v3 - 1)
Rets
